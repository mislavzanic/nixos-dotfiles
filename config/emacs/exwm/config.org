#+title: EXWM Config

* EXWM config
#+begin_src emacs-lisp :tangle ./+exwm.el
;;; +exwm.el --- Description -*- lexical-binding: t; -*-
;;; Commentary:
;;
;;  Description
;;
;;; Code:
#+end_src

** Variables
#+begin_src emacs-lisp :tangle ./+exwm.el
#+end_src

** Functions
#+begin_src emacs-lisp :tangle ./+exwm.el
(defun efs/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(defun efs/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

(defun efs/set-wallpaper ()
  (interactive)
  (start-process-shell-command
   "feh" nil "feh --bg-fill ~/.local/share/bg"))

(defun efs/exwm-init-hook ()
  (exwm-workspace-switch-create 1)

  (setq display-time-day-and-date t)
  (display-time-mode 1)

  (efs/start-panel)
  (efs/run-in-background "nm-applet")
  (efs/run-in-background "pasystray"))

(defun efs/exwm-update-title ()
  (pcase exwm-class-name
    ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))
    ("zathura" (exwm-workspace-rename-buffer (format "Zathura: %s" exwm-title)))
    ("qutebrowser" (exwm-workspace-rename-buffer (format "qutebrowser: %s" exwm-title)))))

(defun efs/update-displays ()
  (efs/run-in-background "autorandr --change --force")
  (efs/set-wallpaper)
  (message "Display config: %s"
           (string-trim (shell-command-to-string "autorandr --current"))))
#+end_src

*** Panel
#+begin_src emacs-lisp :tangle ./+exwm.el
(defvar efs/polybar-hdmi nil
  "Holds the process of the running Polybar instance, if any")

(defvar efs/polybar-dp nil
  "Holds the process of the running Polybar instance, if any")

(defun efs/kill-panel ()
  (interactive)
  (when efs/polybar-hdmi
    (ignore-errors
      (kill-process efs/polybar-hdmi)))
  (setq efs/polybar-hdmi nil)
  (when efs/polybar-dp
    (ignore-errors
      (kill-process efs/polybar-dp)))
  (setq efs/polybar-dp nil))

(defun efs/start-panel ()
  (interactive)
  (efs/kill-panel)
  (setq efs/polybar-hdmi (start-process-shell-command "polybar" nil "polybar HDMI0"))
  (setq efs/polybar-dp (start-process-shell-command "polybar" nil "polybar DP0")))

(defun efs/send-polybar-hook (module-name hook-index)
  (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

(defun efs/send-polybar-exwm-workspace ()
  (efs/send-polybar-hook "exwm-workspace" 1))
#+end_src


** Base config
#+begin_src emacs-lisp :tangle ./+exwm.el
(use-package! exwm
  :init
  (setq
   ;; Use the primary clipboard.
   select-enable-primary t
   ;; Follow the mouse.
   focus-follows-mouse t
   ;; Move the focus to the followed window.
   mouse-autoselect-window t
   exwm-workspace-number 5)

  :config

  (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)
  (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

  (start-process-shell-command "xmodmap" nil "xmodmap ~/.config/.dotfiles/config/emacs/exwm/Xmodmap")

  (start-process-shell-command "xsetroot" nil "xsetroot -cursor_name left_ptr")

  (require 'exwm-randr)
  (exwm-randr-enable)
  (setq exwm-randr-workspace-monitor-plist '(0 "DP-0" 1 "HDMI-0"))

  (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

  (add-hook 'exwm-randr-screen-change-hook
    (lambda ()
      (start-process-shell-command
        "xrandr" nil (substitute-env-vars "xrandr --output ${PRIMARY_MONITOR} --mode 1920x1080 --pos 1920x0 --rotate normal --output ${SECONDARY_MONITOR} --mode 1920x1080 --pos 0x0 --rotate normal"))))

  (add-hook 'exwm-randr-screen-change-hook #'efs/update-displays)
  (efs/update-displays)

  (setq exwm-workspace-warp-cursor t)

  (efs/set-wallpaper)

  (setq exwm-input-prefix-keys
    '(?\C-x
      ?\C-u
      ?\C-h
      ?\M-x
      ?\M-`
      ?\M-&
      ?\M-:
      ?\C-\M-j  ;; Buffer list
      ?\C-\ ))  ;; Ctrl+Space

  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ([?\s-b] . counsel-switch-buffer)
          ([?\s-q] . persp-kill-buffer)
          ([?\s-Q] . kill-this-buffer)

          (,(kbd "s-. c") . helpful-command)

          ([?\s-i] . exwm-input-toggle-keyboard)

          ;; Move between windows
          ([?\s-h] . windmove-left)
          ([?\s-j] . windmove-down)
          ([?\s-k] . windmove-up)
          ([?\s-l] . windmove-right)
          ([?\s-H] . windower-swap-left)
          ([?\s-J] . windower-swap-below)
          ([?\s-K] . windower-swap-above)
          ([?\s-L] . windower-swap-right)

          (,(kbd "s-<tab>") . windower-toggle-single)
          (,(kbd "s-s") . windower-toggle-split)

          (,(kbd "s-o") . counsel-google)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)
          ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
  (exwm-input-set-key (kbd "s-p") 'dmenu)

  (exwm-enable))

;; Update panel indicator when workspace changes
(add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace)

#+end_src

** Packages
#+begin_src emacs-lisp :tangle ./+exwm.el
(use-package! helm-exwm
  :config
  (setq helm-exwm-emacs-buffers-source (helm-exwm-build-emacs-buffers-source))
  (setq helm-exwm-source (helm-exwm-build-source))
  (setq helm-mini-default-sources `(helm-exwm-emacs-buffers-source
                                    helm-exwm-source
                                    helm-source-recentf)))
(require 'helm-exwm)

(use-package! dmenu)
;;; +exwm.el ends here
#+end_src

* Keyboard confg
#+begin_src sh :tangle ./Xmodmap
clear lock
clear control
keycode 66 = Control_L
add control = Control_L
add Lock = Control_R
#+end_src

* Polybar
#+begin_src conf :tangle ~/.config/polybar/config :mkdirp yes

[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0

[colors]
background = #D7000000
background-alt = #576075
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #c792ea


[bar/HDMI0]
monitor = HDMI-0
width = 100%
height = 15
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=8:weight=bold;2"
font-1 = "Font Awesome:size=4;2"
font-2 = "Material Icons:size=12;2"
font-3 = "Fira Mono:size=3;-3"

modules-left = exwm-workspace
modules-right = cpu temperature date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize


[bar/DP0]
monitor = DP-0
width = 100%
height = 15
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=8:weight=bold;2"
font-1 = "Font Awesome:size=4;2"
font-2 = "Material Icons:size=12;2"
font-3 = "Fira Mono:size=3;-3"

modules-left = exwm-workspace
modules-right = cpu temperature date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize

[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
format-padding = 1

[module/cpu]
type = internal/cpu
interval = 2
format = <label> <ramp-coreload>
format-underline = ${colors.underline-1}
click-left = emacsclient -e "(proced)"
label = %percentage:2%%
ramp-coreload-spacing = 0
ramp-coreload-0 = ▁
ramp-coreload-0-foreground = ${colors.foreground-alt}
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇

[module/date]
type = internal/date
interval = 5

date = "%a %b %e"
date-alt = "%A %B %d %Y"

time = %l:%M %p
time-alt = %H:%M:%S

format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}

label = %date% %time%

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <label>
format-underline = ${colors.underline-1}
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%!
label-warn-foreground = ${colors.secondary}
#+end_src
